<%

/*
 Description: Provides CRUD support for assets
 Note: type: shortName in the Rxt templates
 GET  api/asset/{type} 	       	  : Provides the Rxt template
 GET  api/asset/{type}/{id}        : Provides artifact details on the provided type
 POST api/asset/{type}             : Creates a new asset of the given type
 PUT  api/asset/{type}/{id}	  : Updates an asset with the given type and id
 DELETE asset/{type}/{id} 	  : Deletes an asset with the provided type and id
 Filename:asset.js
 Created Date: 29/7/2013
 */

include("/extensions/webapp/modules/jagg/jagg.jag");

require('/modules/publisher.js').exec(function(ctx) {

var config = require('/config/publisher.json');
var caramel = require('caramel');
var apiProvider = jagg.module('manager').getAPIProviderObj();
var router = require('/modules/router-g.js').router();
var routeManager = new router.Router();
var log= new Log();

var appmgtPublisher = require('appmgtpublisher');

routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}', function (context) {

    var shortName = (context.params.type) || '';

    var rxtTemplate = rxtManager.findAssetTemplate(function (template) {
        return (template.shortName == shortName) ? true : false;
    });

    if (!rxtTemplate) {
        log.debug('The asset type: ' + shortName + ' could not be found');
        response.sendError(404, 'Asset type not found.'); //TODO: Replace
    }
    else {
        var model = modelManager.getModel(shortName);
        //Obtain the username from the session and populate the provider field

        var username=require('store').server.current(session).username;//.get('LOGGED_IN_USER');
        model.set('overview.provider',username);
        var output=model.export('form');

        print(output);
    }
});

routeManager.register('POST', 'publisher', '/publisher/api/asset/delete/{type}/{id}', function (context) {
		
	var shortName = context.params.type;
	var id = context.params.id;
	var msg={};
	var artifactManager = rxtManager.getArtifactManager(shortName);
	var server  = require('store').server;
	var username = server.current(session).username;
		    
	try {
		  	//Get the original artifact
			var originalArtifact = artifactManager.get(id);
		    var attributes = originalArtifact.attributes;
		        
		    var apiIdentifier = Packages.org.wso2.carbon.appmgt.api.model.APIIdentifier;
		    var apiMgtDAO = Packages.org.wso2.carbon.appmgt.impl.dao.ApiMgtDAO;
		    var webApp = Packages.org.wso2.carbon.appmgt.api.model.WebApp;
		   
		    var apiIdentifierObj = new apiIdentifier(attributes["overview_provider"], attributes["overview_name"], attributes["overview_version"]);
		    var apiMgtDAOObj = new apiMgtDAO();
		    var webAppObj = new webApp(apiIdentifierObj);
		    
		    var isDeleted = apiMgtDAOObj.deleteApp(apiIdentifierObj,username,webAppObj);
		    
		    if(isDeleted==1){ 
		    	msg['ok']=true;
		        msg['message']='asset delete';
		        print(msg);
		        
		        try {
		        		artifactManager.remove(id);
		        	} catch (e) {
		        		log.debug('Asset ' + id + 'could not be removed.An exception was thrown: ' + e);
		        	    response.sendError(404, 'Asset with id: ' + id + ' could not be removed.');
		        	}      	    
		        	
		    }else if (isDeleted==2){
		        msg['ok']=true;
		        msg['message']='asset subscribed';
		        print(msg);
		    }else if (isDeleted==3){
		        msg['ok']=false;
		        msg['message']='asset subscribed';
		        print(msg);
		    }else{
		       	msg['ok']=null;
		        msg['message']='asset error';
		        print(msg);
		    }
		
	} catch (e) {
		log.debug('The asset ' + id + ' could not be deleted.The following exception was thrown: ' + e);
		response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
	}
});


routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {

    var shortName = context.params.type;

    var id = context.params.id;

    var artifactManager = rxtManager.getArtifactManager(shortName);

    //If the id is not found it will throw a conversion exception
    try {

        var artifact = artifactManager.get(id);

        //Perform some filerting logic
        artifact=filterManager.filter(artifact,session);

        if(!artifact){
            response.sendError(401,'You do not have viewing rights for this asset');
            return;
        }

        var model = modelManager.getModel(shortName);

        //Customize the resource for the current app
        dataInjector.inject(artifact,DataInjectorModes.DISPLAY);

        model.import('asset', artifact);


        var result = model.export('form');

        print(result);
    } catch (e) {

        log.debug('The asset type: ' + shortName + ' with id: ' + id + ' could not be found.The following exception was thrown: ' + e);
        response.sendError(404, 'Asset with id ' + id + ' could not be found.Please check the server logs.');
    }

});

routeManager.register('POST', 'publisher', '/publisher/api/asset/{type}', function (context) {
    var shortName = context.params.type;
    var artifactManager = rxtManager.getArtifactManager(shortName);

    //Check if the type is valid
    try {

        var model=modelManager.getModel(shortName);

        //assigning default thumbnail and banner if not provided.
        if(context.post['images_thumbnail'] == '') {
            context.post['images_thumbnail'] = '/publisher/config/defaults/img/thumbnail.jpg';
        }
        if(context.post['images_banner'] == '') {
            context.post['images_banner'] = '/publisher/config/defaults/img/banner.jpg';
        }

        model.import('form.importer',context.post);

        //Perform validations on the asset
        var report=model.validate();

        //If the report indicates the model has failed validations send an error
        if((report)&&(report.failed)){
            print({ok:false,message:'Validation failure',report:report});
            return;
        }

        //var assetModel = getModel(context.post);

        model.save();

        //var createdAsset = artifactManager.add(assetModel);

        //Get the model id
        var idField = model.get('*.id');

        if (idField) {
            print({ok: 'true', message: 'Asset created.', id: idField.value});
        }
        else {
            log.debug('An asset of type: ' + shortName + ' could not be created.Probably a fault with publisher logic!');
        }

    }
    catch (e) {
        log.debug('An asset of type: ' + shortName + ' could not be created.The following exception was thrown: ' + e);
        response.sendError(500, 'An asset of type: ' + shortName + ' could not be created.Please check the server logs.');
    }

});

	routeManager.register('GET', 'publisher', '/publisher/api/asset/userRoles/{type}/{id}', function (context) {
	
	    var type = context.params.type;
	    var id = context.params.id;
	
	    var artifactManager = rxtManager.getArtifactManager(type);
	
	    var artifact = artifactManager.get(id);
	
	    //Obtain the path of the asset
	    var path = artifact.path;
	
	    //Obtain the tags
	    var tags = rxtManager.registry.tags(path);
	
	    //Create a tag array
	    var counter = 0;
	    var tagArray = [];
	
	    for (var index in tags) {
	        tagArray.push({id: counter, name: tags[index]});
	    }
	
	    print(tagArray);
	});


routeManager.register('POST', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
	
    var shortName = context.params.type;
    var id = context.params.id;
    var msg={};
    var artifactManager = rxtManager.getArtifactManager(shortName);
    
    var server  = require('store').server;
    var username = server.current(session).username;

    if(context.post['images_thumbnail'] instanceof Array){
	context.post['images_thumbnail'] = context.post['images_thumbnail'][0];
    }
    if(context.post['images_banner'] instanceof Array){
	context.post['images_banner'] = context.post['images_banner'][0];
    }

    try {
        var modelA = modelManager.getModel(shortName);
        var modelB = modelManager.getModel(shortName);

        //Handle any files
        inspectFiles(request,context.post);
        var originalArtifact = artifactManager.get(id);
                
        //Get the original artifact
        if(context.post["images_thumbnail"] == ""){
        	context.post["images_thumbnail"] = originalArtifact.attributes["images_thumbnail"];
        }
    	if(context.post["images_banner"] == ""){
        	context.post["images_banner"] = originalArtifact.attributes["images_banner"];
        }
                  
        modelA.import('form.importer', context.post);

        //Validation requires the lifecycle state
        modelA.set('*.lifecycleState',originalArtifact.lifecycleState);

        var report=modelA.validate();
        //Check if the validation check has failed
        if((report)&&(report.failed)){

            msg['ok']=false;
            msg['report']=report;
            print(msg);
            log.debug(msg);
            return;
        }


        modelA.set('*.id', id);

        modelB.import('asset', originalArtifact);
       
        //Checks whether two models are equal
        var reqProps=['overview.name', 'overview.provider', 'overview.version']

        var isEqual = modelManager.assertEqual(modelA, modelB,reqProps);

        //If they are not equal,abort the operation
        if (!isEqual) {
            log.debug('trying to get fields which are different');
            var diff=modelManager.diff(modelA,modelB,reqProps);
            response.sendError(406, 'The name,provider and version of an asset cannot be changed.The following fields'
                    +' were modified: '+diff);
            return;
        }
        modelA.set("overview.createdtime",modelB.get("overview.createdtime").value);
        var artifact = modelA.export('asset.exporter');
       

        var index = 0;
	var uritemplate = "uritemplate_urlPattern" + index;
	
	while (uritemplate in artifact.attributes) {
		var urlPattern = artifact.attributes['uritemplate_urlPattern'+index];
		if(urlPattern == "null" || urlPattern == "" ){
			var key_pattern = 'uritemplate_urlPattern'+index;
			var key_httpVerb = 'uritemplate_httpVerb' + index;
			var key_tier = 'uritemplate_tier'  + index;
			var key_skipthrottle = 'uritemplate_skipthrottle'  + index;
			var key_user_roles = 'uritemplate_userRoles' + index;
            var key_policy_id = 'uritemplate_entitlementPolicyId' + index;
						
			delete artifact.attributes[key_pattern];
			delete artifact.attributes[key_httpVerb];
			delete artifact.attributes[key_tier];
			delete artifact.attributes[key_skipthrottle];
			delete artifact.attributes[key_user_roles];
            delete artifact.attributes[key_policy_id];
            		
		}
		index++;
		uritemplate = "uritemplate_urlPattern" + index;
		
	}

        dataInjector.inject(artifact,DataInjectorModes.UPDATE);

        artifactManager.update(artifact);

        dataInjector.inject(artifact,DataInjectorModes.DISPLAY);

	    var update = apiProvider.updateAPI(artifact);

        var attributes = artifact.attributes;

        //Update entitlement policies of the web application
        updateEntitlementPolicies(attributes["overview_provider"], attributes["overview_name"], attributes["overview_version"]);
        
        //update OAuth APIs consumer details per given web-app
        var apiIdentifier = Packages.org.wso2.carbon.appmgt.api.model.APIIdentifier;
        var apiIdentifierObj = new apiIdentifier(attributes["overview_provider"], attributes["overview_name"], attributes["overview_version"]);
                
        var webApp = Packages.org.wso2.carbon.appmgt.api.model.WebApp;
        var webAppObj = new webApp(apiIdentifierObj);
        
        var apiMgtDAO = Packages.org.wso2.carbon.appmgt.impl.dao.ApiMgtDAO;
        var apiMgtDAOObj = new apiMgtDAO();
        
        apiMgtDAOObj.updateOAuthAPIAccessInfo(webAppObj);
                
        var count = 1;
        var tokenEndpoint = attributes["oauthapis_apiTokenEndpoint" + count];
                
        while (tokenEndpoint != null && tokenEndpoint.length > 0) {
                	                	
                    webAppObj.setTokenEndpoint(attributes["oauthapis_apiTokenEndpoint" + count]);
                    webAppObj.setApiConsumerKey(attributes["oauthapis_apiConsumerKey" + count]);
                    webAppObj.setApiConsumerSecret(attributes["oauthapis_apiConsumerSecret" + count]);
                    webAppObj.setApiName(attributes["oauthapis_apiName" + count]);
                                        
                    count++;
                    tokenEndpoint = attributes["oauthapis_apiTokenEndpoint" + count];
                                        
                    //Save OAuth APIs consumer details per given web-app
                    apiMgtDAOObj.addOAuthAPIAccessInfo(webAppObj);
        }
        
        saveExternalEntitlementPolicies(context.post);

        msg['ok']=true;
        msg['message']='asset updated';
        msg['asset']=artifact;
        print(msg);
      

    } catch (e) {
 		log.warn(e)
        log.debug('The asset ' + id + ' could not be updated.The following exception was thrown: ' + e);
        response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
    }
});

/**
* Saves external entitlement policies.
*/
function saveExternalEntitlementPolicies(params){

    var policies = parse(params['entitlementPolicies']);
    var policiesToBeSaved = new Array();

    var EntitlementPolicy = Packages.org.wso2.carbon.appmgt.api.model.entitlement.EntitlementPolicy;
    var entitlementPolicy;
    for(var i = 0; i < policies.length; i++){
        if(policies[i]){
            entitlementPolicy  = new EntitlementPolicy();
            entitlementPolicy.setPolicyId(policies[i]['id']);
            entitlementPolicy.setPolicyContent(policies[i]['content']);
            policiesToBeSaved.push(entitlementPolicy);    
        }
        
    }

    if(policiesToBeSaved.length > 0){
        apiProvider.saveEntitlementPolicies(policiesToBeSaved);    
    }

}

/**
* Update entitlement policies.
*/
function updateEntitlementPolicies(overviewProvider,overviewName,overviewVersion){

     // Save external entitlement policies
        var webappId={};
        webappId.provider= overviewProvider;
        webappId.name= overviewName;
        webappId.version= overviewVersion;
        log.info(webappId)
       apiProvider.generateEntitlementPolicies(webappId); 
}


/*
 The function inspects the files sent with a request.If files are found
 they are added to Storage and then the generated uuids are added to
 the POST parameter object
 @req: A request object
 @params: The POST parameters
 */
function inspectFiles(req, params) {
    var files = req.getAllFiles();
    var fileName;
    var file;
    var uuid = '';
    var extension;
    var thumbnail;
    var banner;

    var storageManager = new storageModule.StorageManager({
        context: 'storage',
        isCached: false,
        connectionInfo: {
            dataSource: storageConfig.dataSource
        }
    });


    for (var index in files) {

        file = files[index];

        log.debug('file: ' + index);

        //Put the file in storage and get a uuid as a reference
        var resource = {};
        resource['file'] = file;
        extension = utility.fileio.getExtension(file);
        resource['contentType'] = utility.fileio.getContentType(extension);

        uuid=storageManager.put(resource);

        log.debug('uuid added: '+uuid);

        //Add a new  entry into the POST parameters containing the uuid
        params[index] = uuid;

    }
}

routeManager.register('PUT', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
    var shortName = context.params.type;
    var id = context.params.id;
    var msg={};
    var artifactManager = rxtManager.getArtifactManager(shortName);


    try {
        var modelA = modelManager.getModel(shortName);
        var modelB = modelManager.getModel(shortName);

        //Get the original artifact
        var originalArtifact = artifactManager.get(id);

        modelA.import('form.importer', context.content);
        
        //Validation requires the lifecycle state
        modelA.set('*.lifecycleState',originalArtifact.lifecycleState);

        var report=modelA.validate();

        //Check if the validation check has failed
        if((report)&&(report.failed)){

            msg['ok']=false;
            msg['report']=report;
            print(msg);
            return;
        }

        modelA.set('*.id', id);

        modelB.import('asset', originalArtifact);

        //Checks whether two models are equal
        var reqProps=['overview.name', 'overview.provider', 'overview.version']

        var isEqual = modelManager.assertEqual(modelA, modelB,reqProps);

        //If they are not equal,abort the operation
        if (!isEqual) {
            log.debug('trying to get fields which are different');
            var diff=modelManager.diff(modelA,modelB,reqProps);
            response.sendError(406, 'The name,provider and version of an asset cannot be changed.The following fields'
            +' were modified: '+diff);
            return;
        }
        modelA.set("overview.createdtime",modelB.get("overview.createdtime").value);
        var artifact = modelA.export('asset.exporter');

        log.debug('not updating'+artifact);
        //artifactManager.update(artifact);

        msg['ok']=true;
        msg['message']='asset updated';
        print(msg);

    } catch (e) {
        log.debug('The asset ' + id + ' could not be updated.The following exception was thrown: ' + e);
        response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
    }
});



routeManager.register('DELETE', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
    var shortName = context.params.type;
    var id = context.params.id;

    var artifactManager = rxtManager.getArtifactManager(shortName);

    try {
        artifactManager.remove(id);
        print({ok: 'true', message: 'Asset deleted'});
    } catch (e) {
        log.debug('Asset ' + id + 'could not be removed.An exception was thrown: ' + e);
        response.sendError(404, 'Asset with id: ' + id + ' could not be removed.');
    }


});



var securityModule=require('/modules/security/security.manager.js').securityManagementModule();

var sm=securityModule.cached();

//This will short circuit the handling of the requests
var passed=sm.check(session,function(){
    response.sendError(401);

});

//Stop servicing the request if the check failed
if(passed){

    var user=require('store').user;
    var publisher = require('/modules/publisher.js').publisher(request, session);

    //var routeManager=application.get(config.app.ROUTE_MANAGER);
    var rxtManager = publisher.rxtManager;
    var modelManager = publisher.modelManager;
    var dataInjector=publisher.dataInjector;
    var DataInjectorModes=publisher.DataInjectorModes;
    var filterManager=publisher.filterManager;
    var storageModule = require('/modules/data/storage.js').storageModule();
    var storageConfig = require('/config/storage.json');
    var utility = require('/modules/utility.js').rxt_utility();
    var log=new Log();

    routeManager.handle(request, response);
}

}, request, response, session);

%>
