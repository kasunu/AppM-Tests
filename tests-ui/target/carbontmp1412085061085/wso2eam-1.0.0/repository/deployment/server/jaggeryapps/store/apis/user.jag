<%
include('/extensions/assets/webapp/modules/jagg/jagg.jag');

var log = new Log();

var storeHostObj = jagg.module("manager").getAPIStoreObj();
var AuthService=require('../extensions/assets/webapp/services/authentication.js').serviceModule;

require('/modules/store.js').exec(function (ctx) {
    var action, data, message, exists,
            error = false,
            log = new Log(),
            user = require('store').user,
            matcher = new URIMatcher(request.getRequestURI()),
            userDetails={},
            parameters;
  

   var authenticator=new AuthService.Authenticator();
   authenticator.init(jagg,session);

    if (matcher.match('/{context}/apis/user/{action}')) {
        action = matcher.elements().action;
        switch (action) {
            case 'login':
                try {
                    data = request.getContent();
                    error = !user.login(data.username, data.password, session);
	            var tenant = ctx.tenant;

                    //parameters=request.getAllParameters();
                    userDetails['username']=data.username;
                    userDetails['password']=data.password;
		    userDetails['tenantId']=tenant;
		    userDetails['action']="login";				

                    authResult=authenticator.login(userDetails);
                    if (error) {
                        message = 'Invalid username or password.';
                    }
                } catch (e) {
                    log.error(e);
                    error = true;
                    message = e.message;
                }
                print({
                    error: error,
                    message: message
                });
                return;
            case 'logout':
                try {
                    user.logout();
		    userlogged=authenticator.getLoggedInUser();
		    if(userlogged){
			authenticator.logout();
		    }
                } catch (e) {
                    log.error(e);
                    error = true;
                    message = e.message;
                }
                print({
                    error: error,
                    message: message
                });
                return;
            case 'register':
                try {
                    data = request.getContent();
                    //user.register(data.username, data.password);
		    storeHostObj.addUser(data.username, data.password);
                } catch (e) {
                    log.error(e);
                    error = true;
                    message = e.message;
                }
                print({
                    error: error,
                    message: message
                });
                return;
            case 'exists':
                try {
                    data = request.getContent();
                    exists = user.userExists(data.username);
                    if (exists) {
                        message = 'Username ' + data.username + ' has already taken.';
                    }
                } catch (e) {
                    log.error(e);
                    error = true;
                    message = e.message;
                }
                print({
                    error: error,
                    exists: exists,
                    message: message
                });
                return;
        }
        return;
    }
    response.sendError(404, 'API Endpoint Not Found');
}, request, response, session);
%>

